pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "ashieloche/pokedopt_website"
        DOCKER_REGISTRY = "https://index.docker.io/v1/"
        REGISTRY_CREDENTIALS = 'docker-registry-credentials'
        STAGING_CONTAINER_NAME = "pokedopt_website_container"
        BUILD_ID = "latest"
    }

    stages {
        stage('Install Dependencies') {
            steps {
                powershell '''
                    # Set PowerShell execution policy
                    Set-ExecutionPolicy Bypass -Scope Process -Force

                    # Check if Chocolatey is already installed
                    if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
                        Write-Output "Chocolatey not found. Installing Chocolatey..."
                        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
                        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
                        Write-Output "Chocolatey installed. Please reboot the system for the changes to take effect."
                        Exit 1
                    } else {
                        Write-Output "Chocolatey is already installed."
                    }

                    # Check if PHP is already installed
                    if (-not (Get-Command php -ErrorAction SilentlyContinue)) {
                        Write-Output "PHP not found. Installing PHP..."
                        choco install php -y
                    } else {
                        Write-Output "PHP is already installed."
                    }

                    # Ensure OpenSSL extension is enabled for PHP
                    $isOpensslLoaded = php -r "echo extension_loaded('openssl');" 2>$null
                    if ($isOpensslLoaded -eq "1") {
                        Write-Output "OpenSSL extension already loaded."
                    } else {
                        $phpIniPath = php -r "echo php_ini_loaded_file();"
                        if (-not [string]::IsNullOrEmpty($phpIniPath)) {
                            if (Get-Content $phpIniPath | Select-String -Pattern ';extension=openssl') {
                                Write-Output "Enabling OpenSSL extension for PHP..."
                                (Get-Content $phpIniPath) -replace ';extension=openssl', 'extension=openssl' | Set-Content $phpIniPath
                                Write-Output "OpenSSL extension enabled. Please restart your web server or PHP service."
                                Exit 1
                            } else {
                                Write-Output "OpenSSL extension already enabled."
                            }
                        } else {
                            Write-Output "PHP INI file not found."
                        }
                    }

                    # Check if Composer is already installed
                    if (-not (Get-Command composer -ErrorAction SilentlyContinue)) {
                        Write-Output "Composer not found. Installing Composer..."
                        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                        Invoke-WebRequest -Uri https://getcomposer.org/Composer-Setup.exe -OutFile composer-setup.exe
                        Start-Process -Wait -NoNewWindow -FilePath "composer-setup.exe" -ArgumentList "/install=C:\\ProgramData\\ComposerSetup /SILENT"
                        Write-Output "Composer installed."
                    } else {
                        Write-Output "Composer is already installed."
                    }

                    # Verify installations
                    Write-Output "Verifying installations..."
                    php -v
                    composer -v
                    if (Test-Path "vendor\\bin\\phpunit") {
                        vendor\\bin\\phpunit --version
                    } else {
                        Write-Output "PHPUnit not found. Skipping test verification."
                    }
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        echo "Building Docker image..."
                        def customImage = docker.build("${env.DOCKER_IMAGE}:${env.BUILD_ID}")
                        echo "Docker image built: ${customImage}"
                    } catch (Exception e) {
                        error("Docker build failed: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    try {
                        docker.withRegistry("${env.DOCKER_REGISTRY}", "${env.REGISTRY_CREDENTIALS}") {
                            echo "Pushing Docker image..."
                            docker.image("${env.DOCKER_IMAGE}:${env.BUILD_ID}").push()
                        }
                    } catch (Exception e) {
                        error("Docker push failed: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Run tests with TestDox') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    powershell '''
                        # Run PHPUnit tests with TestDox if PHPUnit is installed
                        if (Test-Path "vendor\\bin\\phpunit") {
                            Write-Output "Running PHPUnit tests with TestDox..."
                            & vendor\\bin\\phpunit --bootstrap vendor/autoload.php --testdox tests
                        } else {
                            Write-Output "PHPUnit is not installed. Skipping TestDox tests."
                        }
                    '''
                }
            }
        }

        stage('Run tests with JUnit results') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    powershell '''
                        # Run PHPUnit tests with JUnit results if PHPUnit is installed
                        if (Test-Path "vendor\\bin\\phpunit") {
                            Write-Output "Running PHPUnit tests with JUnit results..."
                            & vendor\\bin\\phpunit --bootstrap vendor/autoload.php --log-junit test-results\\phpunit.xml tests\\Integration
                        } else {
                            Write-Output "PHPUnit is not installed. Skipping JUnit results generation."
                        }
                    '''
                }
            }
            post {
                always {
                    junit testResults: 'test-results\\*.xml', skipPublishingChecks: true
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    try {
                        // Stop and remove the existing container if it exists
                                               bat """
                        docker ps -q --filter "name=${env.STAGING_CONTAINER_NAME}" > container_id.txt 2>&1
                        if exist container_id.txt (
                            for /F %%i in (container_id.txt) do docker stop %%i 2>&1
                        ) else (
                            echo Container not running
                        )
                        del container_id.txt

                        docker ps -aq --filter "name=${env.STAGING_CONTAINER_NAME}" > container_id.txt 2>&1
                        if exist container_id.txt (
                            for /F %%i in (container_id.txt) do docker rm %%i 2>&1
                        ) else (
                            echo Container not found
                        )
                        del container_id.txt
                        """

                        // Pull the latest image
                        bat """
                        docker pull ${env.DOCKER_IMAGE}:${env.BUILD_ID}
                        """

                        // Run the new container
                        bat """
                        docker run -d --name ${env.STAGING_CONTAINER_NAME} -p 8081:80 ${env.DOCKER_IMAGE}:${env.BUILD_ID}
                        """
                    } catch (Exception e) {
                        error("Deployment to staging failed: ${e.getMessage()}")
                    }
                }
            }
        }
    }
}
